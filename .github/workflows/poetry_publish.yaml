name: poetry_build_publish

on:
  workflow_call:
    inputs:
      pypi_package:
        required: true
        type: string
    secrets:
      pypi_user:
        required: true
      pypi_password:
        required: true
      discord_webhook_url:
        required: true
      discord_role:
        required: true

jobs:
  poetry-publish:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.publish.outputs.success }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check TOML version
        id: check
        uses: ./.github/actions/check-toml
        with:
          pypi_package: ${{ inputs.pypi_package }}

      - name: Exit if not version bumped
        if: steps.check.outputs.uped_toml != 'true'
        run: echo "No version bump — skipping build/publish" && exit 1

      - name: Install Poetry
        run: pip install poetry

      - name: Build PyPI package
        run: poetry build

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(grep -o 'version = ".*"' pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Publish PyPI package
        id: publish
        env:
          POETRY_PYPI_USERNAME: ${{ secrets.pypi_user }}
          POETRY_PYPI_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          if poetry publish --username "$POETRY_PYPI_USERNAME" --password "$POETRY_PYPI_PASSWORD"; then
            echo "✅ Publish succeeded"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Publish failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  notify-discord:
    needs: poetry-publish
    runs-on: ubuntu-latest
    if: always()  # Notify on both success and failure
    steps:
      - name: Get User Avatar URL
        id: avatar
        run: |
          AVATAR_URL=$(curl -s https://api.github.com/users/${{ github.actor }} | jq -r '.avatar_url')
          echo "avatar_url=$AVATAR_URL" >> $GITHUB_ENV

      - name: Send notification to Discord
        run: |
          CMD="python /scripts/send_update_notification.py \
            --type ${{ inputs.pypi_package }} \
            --author ${{ github.actor }} \
            --author-icon ${{ env.avatar_url }} \
            --action-url https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ '${{ needs.poetry-publish.outputs.success }}' == 'true' ] && \
             [ '${{ steps.check.outputs.uped_toml }}' == 'true' ]; then
            CMD="$CMD --success 1"
          fi

          CMD="$CMD --version ${{ needs.poetry-publish.outputs.version }} \
              --cicd-id ${{ secrets.discord_role }}"

          echo "$CMD"

          docker run --rm \
            -v ${{ github.workspace }}:/repo \
            -w /repo \
            -e DISCORD_WEBHOOK_URL=${{ secrets.discord_webhook_url }} \
            byucscourseops/send_update_notification:latest \
            sh -c "$CMD"
